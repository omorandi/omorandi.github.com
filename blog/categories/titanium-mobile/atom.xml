<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Titanium Mobile | Titanium Ninja]]></title>
  <link href="http://titaniumninja.com/blog/categories/titanium-mobile/atom.xml" rel="self"/>
  <link href="http://titaniumninja.com/"/>
  <updated>2012-05-28T13:41:36+02:00</updated>
  <id>http://titaniumninja.com/</id>
  <author>
    <name><![CDATA[TiNinja]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Profiling Ti Mobile apps: is it possible?]]></title>
    <link href="http://titaniumninja.com/profiling-ti-mobile-apps-is-it-possible/"/>
    <updated>2012-03-12T12:08:00+01:00</updated>
    <id>http://titaniumninja.com/profiling-ti-mobile-apps-is-it-possible</id>
    <content type="html"><![CDATA[<p>Short answer is: "YES" (at least on iOS - for now), and this post is here to share some very early results for supporting such statement. What's reported here is just something I started working on in the last few weeks and it's still a quite long term work in progress.</p>

<h2>Profiling tools</h2>

<p>Profiling means measuring how much time is spent in every relevant portion of code of an application during its execution, and it represents the first step to be done when searching for spots in the code that can be optimized, in order to achieve better performance. Performing any form of optimization without profiling first is like running a race with blinded eyes.</p>

<p>So, what does it mean profiling a Titanium Mobile application written in JavaScript? What tools do we have? How can we find hotspots in our poorly behaving apps? The reality is that unlike other development enviroments, the Titanium Mobile SDK doesn't provide any tool for accurately profiling JS apps.
When developing for iOS, we can use the Instruments profiling tool provided with Xcode, and the typical results obtained using such tool are shown in the following picture:</p>

<p><img class="center" src="/images/posts/XcodeProfilingTool.png"></p>

<p>in the bottom-right panel we see a list of functions and methods with the associated total time spent executing them. However, while this kind of information gives us a notion on the time spent inside the functions of the framework, the time spent in our JavaScript functions, which are those we probably want to optimize, is completely hidden behind the calls to the functions of the JavaScript interpreter.</p>

<p>On the other hand, developers coming from web development may be used to working with the JS tools provided by the major browsers (e.g. Firebug in Firefox, Chrome &amp; Safari developer tools, etc.), which give us detailed profiling information on the scripts being executed by a web page. For example, the following picture shows the results obtained with the developer tools available with Chrome:</p>

<p><img class="center" src="/images/posts/ChromeProfiling.png"></p>

<h2>Profiling Ti apps</h2>

<p>Since I need to profile a quite complex Titanium Mobile application for finding hotspots in the code that may need to be offloaded to some native modules, I started guessing how could I achieve my goal. As usual, digging into the Ti SDK code helps a lot, and after following the white rabbit in the hole I found the response in the code of the JavaScriptCore interpreter. We always have to remember that Titanium Mobile shares its core engines with Safari and Chrome, i.e. JavaScriptCore and V8 respectively, so any low level feature tied to JS execution available in these browsers is also available in Titanium, moreover all that code is completely available as open source. So, it turns out that most of the features needed for profiling JS code are exactly where they should be, i.e. in the interpreter.</p>

<p>For those who wonder how a profiler works, it's easy told. The profiler is nothing more than a component that records the time when each function gets called and when it returns. Whenever the interpreter needs to execute a function, it tells the profiler: "I'm going to execute function F, which starts at line X of file at URL Y". The same just after the execution of the function: "I executed Function F, bla bla". This allows the profiler to have a clear vision on two very important kinds of information:</p>

<ul>
<li>How function calls are related, i.e. the <a href="http://en.wikipedia.org/wiki/Call_graph">call graph</a></li>
<li>How much time is spent during the execution of every function</li>
</ul>


<p>Obviously, the total time spent in a function will also include the time spent in nested function calls, but the profiler keeps track of these situations, in order to give accurate results.</p>

<p>So, during my journey, I managed to <a href="/2012-03-02-building-titanium-mobile-jscore-from-source">build the JavaScriptCore library from scratch</a> and I started tweaking the code in order to be able to start and stop the profiling from the native code of a Titanium application. I had a quite encouraging success a couple of weeks ago and tweeted about it:</p>

<blockquote class="twitter-tweet"><p>YAY! got JSCore profiler running in Ti Mobile on iOS! Still work to be done for extracting useful info, though - <a href="https://t.co/yXtItEwS" title="https://skitch.com/omorandi/8ggw7/xcode">skitch.com/omorandi/8ggw7â€¦</a></p>&mdash; Olivier Morandi (@olivier_morandi) <a href="https://twitter.com/olivier_morandi/status/175231374662443010" data-datetime="2012-03-01T14:49:50+00:00">March 1, 2012</a></blockquote>


<script src="http://titaniumninja.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Actually I was happy about the integration, but no real profiling data was returned. After studying more deeply the code and a lot of debugging, today I've been able to produce a  more meaningful profile of a test application, which is composed of a barebone <code>app.js</code> file:</p>

<script src="https://gist.github.com/2029449.js?file=app.js"></script>


<p>and a module containing a couple of functions performing some useless math tasks. The module is suitable to be either included via <code>Ti.include()</code>, or required through CommonJS <code>require()</code>:</p>

<script src="https://gist.github.com/2029449.js?file=included.js"></script>


<p>Please note that the two test functions in <code>included.js</code> are defined in different ways. The first is defined as a <strong>named function</strong> <code>test1()</code>, while the other is defined as an <strong>anonymous function</strong>, which is assigned to the variable <code>test2</code>.</p>

<p>Now let's have a look at what results we have in the Xcode console when I run this program with Ti 2.0.0 and my modified version of the TiJSCore library (click on the image to see it at full size with annotations):</p>

<p><a href="http://titaniumninja.com/images/posts/JSCProfiling-include-annotated.png"><img class="center" src="/images/posts/JSCProfiling-include.png"></a></p>

<p>What gets printed in the console log is the call graph of the program, recorded during its execution. Indentation reflects the caller->called hierarchy and the reported information includes (if available) the file containing the called function, the line where the function is defined the name of the function (more on this later) and the time statistics in terms of "Total Time" spent in the function and "Self Time", which is given by the "Total Time" for the function minus the time spent in nested calls.</p>

<p>In the call graph, some calls are reported with <code>&lt;nofile&gt;</code> file information. These are mainly native and host functions (e.g. <code>Math.cos()</code>, <code>Math.sin()</code>, <code>Ti.include()</code>, and <code>Ti.API.info()</code>), for which no source file is given. Moreover, the calls reported to <code>(program)</code> are those happening in the global scope, while those reported as <code>(Function object)</code> are those made to native and host functions. Similarly, the calls reported as <code>(anonymous function)</code> are obviously those made to anonymous functions. So, depending on how a program is structured it may be more or less easy to interpret such profiling information. For instance, in my apps, a good 90% of the functions are anonymous.</p>

<h2>How did I make it?</h2>

<p>As I told, this is still work in progress and all I have profiled until now is some very basic test application like the one reported here. For achieving these early results I had to:</p>

<ol>
<li>Extend a bit the TiJSCore library, in order to expose a couple of functions to the Ti SDK, which are used for starting and stopping the profiler.</li>
<li>Perform some very small modifications to the interpreter in order to enable code instrumentation (i.e. the code that's used for generating profile data)</li>
<li>Modify the iOS application template generated by the Ti SDK, in order to start the profiler when the first JS execution context is created, and stop the profiling when the application goes in background (e.g. because the user presses the home button), printing the profiling report as a result</li>
</ol>


<p>All this isn't usable yet for profiling "any" real world application, since most of the steps required still need to be done by hand (i.e. patching the Ti SDK and so on), so I think I'll wait until the thing is a bit more stable before publishing the code.</p>

<h2>Future steps</h2>

<p>What's missing? A lot of things, here are some:</p>

<ul>
<li>Checking out what happens with event listeners and callbacks</li>
<li>Test with more complex applications</li>
<li>Creating install scripts in order to streamline the operation on existing applications</li>
<li>Move code for starting and stopping the profiling out of the Ti SDK and put it in a module</li>
<li>Enable the possiblity to start and stop the profiling and analyzing results from a front-end cli app</li>
</ul>


<p>That's it. If anyone is interested in more details don't hesitate to contact me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Titanium Mobile JSCore from source]]></title>
    <link href="http://titaniumninja.com/building-titanium-mobile-jscore-from-source/"/>
    <updated>2012-03-02T16:20:00+01:00</updated>
    <id>http://titaniumninja.com/building-titanium-mobile-jscore-from-source</id>
    <content type="html"><![CDATA[<p>As I already mentioned <a href="http://titaniumninja.com/post/10559549700/fastdev-for-ios-how-it-works/">here</a>, the Titanium Mobile framework on iOS is based on <a href="http://trac.webkit.org/wiki/JavaScriptCore">JavaScriptCore</a> (i.e. the engine used by WebKit) for interpreting and executing your app's JS files.</p>

<p>Since part of my everyday work consists in hacking with the Ti SDK internals and building native modules it often happens that I need to track a bug or an issue down inside the core functions of the framework, and sometimes it would be useful to just take a look at the internal state of the JavaScript engine, in order to have a more detailed vision on where the problem at hand comes from.</p>

<p>However, the JSCore library (<code>libTiCore.a</code>) shipped with the Titanium SDK, is built in <em>Release</em> mode, with debug symbols stripped out, so, while its method and function names appear in a debug stack trace, it's nearly impossible to look at actual variable and class member values.</p>

<p>Fortunately the source code of the library, customized by Appcelerator for integrating it with Titanium, is <a href="https://github.com/appcelerator/tijscore">available on github</a>, so we can create a custom build of it (e.g. a Debug version) and use it for our purposes.</p>

<p>Historically, building the library from scratch has not been much simple, nor documented. Moreover, since the process relied on several shell scripts, it was quite easy to get lost (at least at a first glance). However, in the last few months both Stephen Tramer and Blain Hamon (who are the main contributors to that code base) made a great work in simplifying and linearizing the build process.</p>

<p>This post aims at being just a quick tutorial for anyone needing to build <code>libTiCore</code> from scratch, so let's dig in.</p>

<h2>Building the libTiCore.a library</h2>

<p>As usual, we can pull the git repo with:</p>

<pre><code>git clone https://github.com/appcelerator/tijscore.git
</code></pre>

<p>Once downloaded, in the <code>tijscore</code> directory we'll find a couple of scripts, namely <code>fixup.py</code> and <code>buildit.sh</code> and the <code>TiCore</code> directory, which contains the original files from the JSCore sources.</p>

<p>In order to build the library we first need to run:</p>

<pre><code>./fixup.py
</code></pre>

<p>This script will patch most of the files in the TiCore directory, by changing names of files and symbols according to the Titanium namespace <strong>Ti</strong>, which is the one expected by the Ti SDK source code.</p>

<p>Then we can go with</p>

<pre><code>./buildit.sh
</code></pre>

<p>This script will build the library and create a universal binary for the armv6, armv7 and i386 architectues. The build process is quite long (a bunch of minutes on my i7 MacBook Pro) and you'll notice it's completed when you hear the cooling fans of your computer stop whirling like crazy.</p>

<p>The <code>buildit.sh</code> script also accepts a <em>CONFIG</em> parameter that we can use for instructing it to build a debug version of the library:</p>

<pre><code>./buildit.sh Debug
</code></pre>

<p>Once the build process is completed you'll find the <code>libTiCore.a</code>Â library binary in the <code>TiCore/build</code> directory. The last required step is to install it in the appropriate folder of the Ti SDK:</p>

<pre><code>cp TiCore/build/libTiCore.a $TITANIUM_DIR/mobilesdk/osx/$TITANIUM_VERSION/iphone/
</code></pre>

<p>where <code>$TITANIUM_DIR</code> and <code>$TITANIUM_VERSION</code> are the root directory of your Ti SDK and the version you are currently using, e.g. <code>/Library/Application\ Support/Titanium</code> and <code>2.0.0</code> respectively.</p>

<h2>A note on libTiCore.a versions vs Ti SDK versions</h2>

<p>The Titanium Mobile SDK and the TiCore library are not really independent, so you must pay really big attention on which version of the library versus which version of the SDK you use, otherwise you will quite surely incur in linking errors when you build your titanium applications. For instance, this short tutorial is proved to work with version 16 (git hash ad8053020d) of the library,  which is used by the version 2.0.0 of the Ti SDK.</p>

<p>For 1.8.X versions of the Ti SDK you should use version 15 of the library by checking out the git tag named <code>TiCore-15</code> in the <code>tijscore</code> repository, e.g.:</p>

<pre><code>git checkout TiCore-15
</code></pre>
]]></content>
  </entry>
  
</feed>
