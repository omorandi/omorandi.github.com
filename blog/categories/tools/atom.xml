<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools | Titanium Ninja]]></title>
  <link href="http://titaniumninja.com/blog/categories/tools/atom.xml" rel="self"/>
  <link href="http://titaniumninja.com/"/>
  <updated>2013-10-07T17:53:07+02:00</updated>
  <id>http://titaniumninja.com/</id>
  <author>
    <name><![CDATA[TiNinja]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introducing TiProfiler for iOS]]></title>
    <link href="http://titaniumninja.com/introducing-tiprofiler-for-ios/"/>
    <updated>2012-07-27T16:35:00+02:00</updated>
    <id>http://titaniumninja.com/introducing-tiprofiler-for-ios</id>
    <content type="html"><![CDATA[<p>Around four months ago I started experimenting with some <a href="http://titaniumninja.com/profiling-ti-mobile-apps-is-it-possible/">custom modifications</a> to the  JavaScriptCore library, which is the JavaScript engine used by the Titanium Mobile SDK for executing Titanium applications on iOS. After succeeding in enabling the profiler component provided by JSCore and extracting some relevant profiling data from running applications, I wanted a tool that would allow me to show such information in a manageable way, like the Web Inspector and Developer tools allow to do in Safari or Chrome.</p>

<p>My basic requirements were the following:</p>

<ul>
<li>The tool needed to be able to start and stop the profiler running alongside a Titanium Mobile application executed on the iOS Simulator, as well as to retrieve the collected profiling data</li>
<li>The GUI app should be very simple and quick and easy to develop: a web app would be good enough</li>
<li>I wanted to be able to show the profiling data (i.e. a function call tree showing the amount of time spent in each function) in the typical expandable tree grid</li>
<li>I wanted to be able to quickly show the source code of every referenced function, in order to better understand the data every time an anonymous function was reported</li>
</ul>


<p>So I started creating a very simple web-based GUI and a node.js server component providing a proxy between the client app and the profiler, and today I'm able to introduce some results, with the following demo screencast:</p>

<center><iframe src="http://player.vimeo.com/video/46148981" width="500" height="313" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe> <p><a href="http://vimeo.com/46148981">TiProfiler demo</a> from <a href="http://vimeo.com/user8368459">Olivier Morandi</a> on <a href="http://vimeo.com">Vimeo</a>.</p></center>


<p>This has been possible thanks to the following technologies/libraries:</p>

<ul>
<li><a href="http://www.sencha.com/products/extjs/">Ext JS</a>: General GUI layout &amp; tree-grid</li>
<li><a href="http://ace.ajax.org/">ACE editor</a>: for showing the original source code of the selected application files</li>
<li><a href="http://socket.io/">socket.io</a>: for event-based communication between all the components</li>
</ul>


<p>The screencast showcases the usage of the three main components involved:</p>

<ul>
<li>The node-based server, used for serving the client app files and for communicating  with both the profiler and the GUI</li>
<li>The GUI app itself</li>
<li>The Titanium Mobile application, built and executed through a custom version of the 2.1.0.GA Titanium SDK, with all the required additions to make the magic possible</li>
</ul>


<p>The node server gets notified when the Titanium application and the profiler are started, re-broadcasting such events.
The web-app, on the other side, issues start &amp; stop commands to the node server, which reflects them to the profiler running inside of the Ti app.</p>

<p>At the core of the system lies a custom version of the TiJSCore library, and some very limited additions to the inner workings of the Titanium Kroll bridge. In particular, besides the basic modifications already mentioned in the <a href="http://titaniumninja.com/profiling-ti-mobile-apps-is-it-possible">previous post</a>, it has been necessary to do the following:</p>

<ul>
<li>modifying the code managing the CommonJS <code>require()</code> function, in order to make both the JS interpreter and the profiler aware of the names of the files being loaded through it</li>
<li>decorating the calls to methods of Titanium proxy objects with a representation of their real name, in order to highlight them with something more meaningful than <code>(Function oject)</code>. For example a call to <code>Ti.UI.Window.open()</code> now it's reported as <code>[object TiUIWindow].open</code>: not exactly the JavaScript signature, but quite similar, indeed</li>
<li>building a bit of infrastructure in order to allow the profiler to communicate remotely, either for receiving <code>start</code> and <code>stop</code> commands, either for sending the recorded profiling data. Using the <a href="https://github.com/pkyeck/socket.IO-objc">iOS port of the socket.io library</a> helped a lot in this context.</li>
<li>other minor adjustments (e.g. converting profiling data returned by the JSCore profiler to JSon)</li>
</ul>


<p>At the moment I'm not planning to release these modifications and additions as open source. I'm still thinking about what to do about them. Actually it would be nice if at some point they could be integrated into the Titanium SDK.</p>

<p>Anyway, I'm willing to share this tool with the Titanium community, letting interested folks to play with it, and report any kind of feedback, so I've created a <a href="https://github.com/omorandi/TiProfiler">repository on github</a> hosting both the node server and the client app source code.</p>

<p>Originally I was aiming to keep all the modifications to the JSCore library, as well as the corresponding hooks inside the Titanium SDK completely self-contained in a single binary, in order to be able to provide just a simple drop-in replacement for the <code>libTiCore.a</code> library, to be plugged in a standard distribution of the Ti SDK. However, after integrating <code>socket.io</code> on the iOS side, things are a bit more complicated, since <code>socket.io</code> requires the target app to be linked with the Security framework, which is not linked by default in the standard Titanium Xcode template. For this reason, in order to keep things super-simple for anyone interested in this project, I've prepared a package containing a <a href="https://s3.amazonaws.com/titaniumninja/tiprofiler/2.1.0.GA-profiler.zip">custom version of the 2.1.0.GA Titanium SDK</a> that can coexist side by side with the official SDKs provided by Appcelerator already present in the system.</p>

<p>Anybody wanting to follow all the steps, without using the prebuilt package, can download a <a href="https://s3.amazonaws.com/titaniumninja/tiprofiler/libTiCore.a.zip">custom build of the libTiCore.a library</a>, copy it in the <code>${TI_SDK}/iphone</code> directory of a 2.X.X version of the Ti SDK (where <code>${TI_SDK}</code> for example is <code>/Library/Application\ Support/Titanium/mobilesdk/osx/2.1.0.GA</code>, open the <code>${TI_SDK}/iphone/iphone/Titanium.xcodeproj</code>) and add there a reference to the Security framework.</p>

<p>The custom SDK can be used for building, executing and profiling any Titanium application on iOS, with the following, and maybe more, limitations:</p>

<ul>
<li>It doesn't work for Android targets</li>
<li>It can be used only with apps running inside the iOS Simulator:  apps should be able to execute on device, but at the moment, no profiling data can be exchanged with the node.js server component. Results of building and running Ti apps on device with such SDK are currently undefined</li>
<li>The client app is currently very limited</li>
</ul>


<h2>Wrap up</h2>

<p>Where do we go from here?</p>

<p>I have a bunch of things I'd like to improve/work on in the very near future. Here are some:</p>

<ul>
<li>Replace the currently very limited web-app with the client from the <a href="https://github.com/dannycoates/node-inspector/">Node Inspector</a> project. This is actually a fork of the WebKit Web Inspector that can be used to debug and experimentally profile node.js applications. Modifying this to work with my server should be fairly easy</li>
<li>Improve the way in which anonymous functions are reported. It is true that these functions are actually unnamed, but in most cases they're usually referenced through a variable or an object member. I'd like to leverage the features of the super-cool <a href="http://esprima.org/">Esprima</a> JavaScript parser in order to extract such information directly from source files, reporting the name of the referencing variable/member when possible</li>
<li>Make things work on device</li>
<li>Start studying how to do something similar on V8 for android targets</li>
</ul>


<p>Any comment is well accepted, either here, or on <a href="http://twitter.com/olivier_morandi">twitter</a>. This project is needing some love, especially on the GUI component and node server side. Feel free to fork it on github and make pull requests.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Titanium Mobile applications with Jasmine and Sinon (part I)]]></title>
    <link href="http://titaniumninja.com/testing-titanium-mobile-applications-with-jasmine-and-sinon-part-i/"/>
    <updated>2012-06-11T18:16:00+02:00</updated>
    <id>http://titaniumninja.com/testing-titanium-mobile-applications-with-jasmine-and-sinon-part-i</id>
    <content type="html"><![CDATA[<p>As the code base of an application grows, manual testing becomes very quickly a cumbersome and highly error prone activity. Moreover, when fixing bugs or refactoring portions of the app, there's no way for telling if a fix is breaking something that was previously working. In order to mitigate such drawbacks, automatic unit testing tools come at help, allowing to describe how each single component of an application must behave, and testing in a systematic way if the imposed requirements and expectations are met.</p>

<p>During the last year, which I mainly spent developing and maintaining a quite large and complex Ti Mobile application, I tried to investigate which were the available options for gradually introducing automatic testing in my development workflow. There is plenty of tools and frameworks for Javascript testing, and although most of them are obviously targeted to the web development world, some of them have been more or less successfully made available for testing Titanium Mobile applications.</p>

<p>JS dynamic nature makes it an ideal language for automatic testing: you can easily modify objects at runtime, and provide fake implementations around the code that needs to be tested. So testing JS applications, and in particular Ti Mobile applications is super easy, right? Wrong! Or better, it can be, provided that you use the right tools and that you write your code in a way that makes it easily testable. For instance, every time we use state variables and functions hidden inside closures (e.g. even just using either CommonJS, or the omni-present <a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/#modulepatternjavascript">module pattern</a>), we are creating code that can be hard to test. An interesting take on this problem can be found <a href="http://www.adequatelygood.com/2010/7/Writing-Testable-JavaScript">here</a>.</p>

<p>In this short series of post I'd like to talk about some tools and patterns I've found useful for introducing automatic testing in my coding/refactoring habits.</p>

<h2>The tools</h2>

<p>There are quite <a href="http://en.wikipedia.org/wiki/List_of_unit_testing_frameworks#JavaScript">a lot</a> JavaScript testing frameworks available, some of which are dependent on the presence of a DOM, so they're only suitable for in-browser testing and cannot be used in Titanium. Among those that are framework-independent I've found <a href="http://pivotal.github.com/jasmine/">Jasmine.js</a> very interesting. Jasmine is a self-contained <a href="http://dannorth.net/introducing-bdd/">Behaviour-Driven Development</a> (BDD) framework for Javascript, where tests express the "expected behaviour" for our code. I won't go into detail on the philosophy behind this kind of Test-Driven Development practice, but those willing to dig deeper will find the <a href="http://pragprog.com/book/achbd/the-rspec-book">"RSpec Book"</a> quite useful.</p>

<p>There exist a bunch of attempts bring BDD testing with Jasmine to Titanium:</p>

<ul>
<li><a href="https://github.com/akahigeg/jasmine-titanium">akahigeg Jasmine-Titanium (github)</a></li>
<li><a href="https://github.com/guilhermechapiewski/titanium-jasmine">guilhermechapiewski Titanium-Jasmine (github)</a></li>
<li><a href="http://www.singingseal.com/dev/titanium-and-jasmine/">Cross-platform, Testable Mobile Goodness with Titanium and Jasmine</a></li>
<li>probably others more recents…</li>
</ul>


<p>I have tried each of these approaches and none satisfied me. In particular, the second solution, which is probably the most used among the Ti community and is based on running tests directly in the target simulator, dissatisfied me for the following reasons:</p>

<ul>
<li>Testing in the simulator is very slow, while TDD is based on quick <a href="http://en.wikipedia.org/wiki/Test-driven_development#Development_style">red/green/refactor</a> iterations, where you first write the test for your code, you make it fail, you refactor and iterate until you get a green light. Even if, like me, you don't follow religiously this practice, you quickly lose your patience waiting for the simulator to start every time</li>
<li>I think that testing in the simulator, while surely necessary at some point (mainly while doing integration and acceptance testing), allows taking short paths that quickly lead to writing poorly testable code (more on this later)</li>
</ul>


<p>Actually what I was looking for was a solution allowing me to write and execute my tests in the quickest and simplest way possible. Enter <a href="http://en.wikipedia.org/wiki/Test-driven_development#Development_style">Jasmine-Node</a>, which is a Node.js module, providing a cli for running Jasmine tests through node.</p>

<h3>Jasmine-node: setup &amp; execution</h3>

<p>Supposing you already have Node.js and npm in place, installing jasmine-node is just a matter of typing:</p>

<pre><code>$ sudo npm install jasmine-node -g
</code></pre>

<p>Now you can start executing your tests (also called <em>specs</em>), whose JS files should reside all in the same directory tree. For example, let's consider the following directory tree, which could be part of a Ti Mobile project:</p>

<pre><code>project/
|
+---- Resources/
|     |
|     +---- app.js
|     |
|     +---- app-modules/
|           |
|           +---- backend.js
|           |
|           +---- ui.js
|
+---- spec/
      |
      +---- backend_spec.js
      |
      +---- ui_spec.js
</code></pre>

<p>In <code>Resources</code> we have the application code, contained in a couple of CommonJS modules. Our tests reside in the <code>spec</code> directory. Please note that each file in this directory contain the <code>spec</code> string in its name, allowing jasmine-node to recognize it as a file to be evaluated by the test runner.</p>

<p>Having in mind this directory structure, we can execute our tests (e.g. from inside the <code>project</code> dir):</p>

<pre><code>$ jasmine-node spec
.............

Finished in 0.013 seconds
13 tests, 15 assertions, 0 failures
</code></pre>

<p>the command argument is simply the path of the directory containing our tests.</p>

<h3>Let's write some code and some tests</h3>

<p>Now, we can write our code and our tests. For example, suppose in our app we have a module with some silly utility functions:</p>

<p>```javascript project/Resources/app-modules/util.js:
exports.computeSum = function(a, b) {</p>

<pre><code>return a + b;
</code></pre>

<p>};
```
we can write our Jasmine spec like this:</p>

<p>```javascript project/spec/util_spec.js:</p>

<p>var util = require('../Resources/app-modules/util');
describe('util tests', function() {</p>

<pre><code>it('should compute the sum between 1 &amp; 2', function(){
    var sum = util.computeSum(1, 2);
    expect(sum).toEqual(3);
});
</code></pre>

<p>});
```</p>

<p>let's run the spec:</p>

<pre><code>jasmine-node spec
.

Finished in 0.007 seconds
1 test, 1 assertion, 0 failures
</code></pre>

<p>I don't enter in further details on how to write Jasmine tests, as this will be covered in the second part of this post (still to come);</p>

<p>We need to remember that specs must be written as Node.js modules and obviously the Titanium Mobile API objects won't be available. So <strong>how can we test our Titanium modules if they make use of the Titanium API</strong>? We need to provide our tests with <em>fake</em> implementations of it. This subject leads to the concept of <a href="http://martinfowler.com/articles/mocksArentStubs.html">mocks and stubs</a> and <a href="http://en.wikipedia.org/wiki/Dependency_injection">dependency injection</a>, which I'll cover in the next episode.</p>

<h3>Caveats</h3>

<p>In this post we've just touched the basics about how to setup our environment for testing with node-jasmine and Titanium, however there are some somewhat hidden issues that need to be taken into account. In particular, it turns out that the Titanium implementation of CommonJS <code>require()</code> is <a href="https://jira.appcelerator.org/browse/TIDOC-514.">buggy</a> and doesn't correctly support relative paths. This represents a major problem when trying to integrate jasmine-node test runners in projects with even minimally complex directory trees.</p>

<p>A possible solution to the issue is to not use relative paths in <code>require()</code> in Titanium (but you are free to use them in your jasmine specs run through node). Instead of relative paths we need to use full paths with <code>Resources</code> as the root directory.</p>

<p>For example, taking into account the directory tree laid out before, let's suppose the <code>backend.js</code> module is dependent from the <code>util.js</code> module, we'll need to write the <code>require()</code> in this way:</p>

<p>```javascript project/Resources/app-modules/backend.js:</p>

<pre><code>require('app-modules/util');

//...
</code></pre>

<p>```</p>

<p>In our jasmine specs we'll use relative paths as usual.</p>

<p>Now the trick is to set the NODE_PATH environment variable to point to the <code>Resources</code> directory of the Ti Project, just like:</p>

<pre><code>export NODE_PATH="${PROJECT_DIR}/Resources"
jasmine-node spec
</code></pre>

<p>This will instruct the Node.js environment to search for modules in the <code>Resources</code> directory, allowing them to be found by the test runner.</p>

<p>These two lines can obviously be encapsulated in a shell script or makefile.</p>

<h2>What next?</h2>

<p>In the next episode of this series, we'll see how to write our application modules in Titanium, in order to make them easily testable. We'll also expand our use of available testing frameworks, discussing how to use <a href="http://sinonjs.org/">Sinon.js</a> for creating <a href="http://martinfowler.com/articles/mocksArentStubs.html">mocks and stubs</a>.</p>
]]></content>
  </entry>
  
</feed>
